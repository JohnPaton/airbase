name: CI/CD
on:
  push:
  schedule:
    - cron:  '0 12 1 * *'  # On the first day of the month
  pull_request:

jobs:
  unit-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ['3.8', '3.9', '3.10', '3.11', '3.12']
        prerelease: [false]
        include:
          - python: '3.13'
            prerelease: true
    env:
      # Configure a constant location for the uv cache
      UV_CACHE_DIR: /tmp/.uv-cache
    steps:
      - uses: actions/checkout@v4
      # https://docs.astral.sh/uv/guides/integration/github/#installation
      - name: Set up uv
        # Install latest uv version using the installer
        run: curl -LsSf https://astral.sh/uv/install.sh | sh
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          allow-prereleases: ${{ matrix.prerelease }}
      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}
      - name: Install airbase
        continue-on-error: ${{ matrix.prerelease }}
        run: uv sync --all-extras --dev
      - name: Run unit tests
        continue-on-error: ${{ matrix.prerelease }}
        run: |
          uv run pytest -lk "not integration" --cov
      - name: Minimize uv cache
        run: uv cache prune --ci

#  integration-test:
#    needs: unit-test
#    runs-on: ubuntu-latest
#    env:
#      # Configure a constant location for the uv cache
#      UV_CACHE_DIR: /tmp/.uv-cache
#    steps:
#      - uses: actions/checkout@v4
#      - name: Set up uv
#        # Install latest uv version using the installer
#        run: curl -LsSf https://astral.sh/uv/install.sh | sh
#      - uses: actions/setup-python@v5
#        with:
#          python-version: 3.x
#      - name: Restore uv cache
#        uses: actions/cache@v4
#        with:
#          path: /tmp/.uv-cache
#          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
#          restore-keys: |
#            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
#            uv-${{ runner.os }}
#      - name: Install airbase
#        continue-on-error: ${{ matrix.prerelease }}
#        run: uv sync --all-extras --dev
#      - run: |
#          uv run pytest -lvk "integration"
#      - name: Minimize uv cache
#        run: uv cache prune --ci

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
      - uses: pre-commit/action@v3.0.1
        with:
          extra_args: --all-files

  build-and-deploy:
    needs: [unit-test, lint] #, integration-test]
    runs-on: ubuntu-latest
    env:
      # Configure a constant location for the uv cache
      UV_CACHE_DIR: /tmp/.uv-cache
    steps:
      - uses: actions/checkout@v4
      - name: Set up uv
        # Install latest uv version using the installer
        run: curl -LsSf https://astral.sh/uv/install.sh | sh
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}
      - run: |
          uvx --from build pyproject-build --installer uv
      - uses: pypa/gh-action-pypi-publish@release/v1
        if: |
          github.repository == 'JohnPaton/airbase' &&
          github.event_name == 'push' &&
          startsWith(github.ref, 'refs/tags')
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          skip_existing: true
      - name: Minimize uv cache
        run: uv cache prune --ci
