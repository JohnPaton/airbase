[project]
name = "airbase"
dynamic = ["version"]
requires-python = ">=3.10,<4"
description = "An easy downloader for the AirBase air quality data."
readme = {file = "README.md", content-type = "text/markdown"}
authors = [{name="John Paton", email="john@johnpaton.net"}]
maintainers = [{name="John Paton", email="john@johnpaton.net"}, {name="Alvaro Valdebenito"}]
license = {file = "LICENSE"}
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Atmospheric Science",
]

dependencies = [
    "aiohttp; python_version < '3.12'",
    "aiohttp >= 3.9.0; python_version >= '3.12'",
    "async_property >=0.2.2",
    "aiofiles >=24.1.0",
    "importlib_resources; python_version < '3.11'",
    "tqdm",
    "typer-slim >=0.12.0",
    "typing_extensions >=4.12.2; python_version < '3.11'",
]

[project.urls]
Repository = "https://github.com/johnpaton/airbase"
Documentation = "https://airbase.readthedocs.io"

[project.scripts]
airbase = "airbase.cli:main"

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [{ include-group = "test" }, { include-group = "lint" }]
test = ["pytest>=6.0", "aioresponses", "pytest-asyncio>=0.24.0", "coverage>=7.2.0", "pytest-cov"]
lint = ["mypy>=1.18.2", "ruff>=0.13.3", "types-aiofiles>=24.1.0.20241221"]
docs = ["sphinx>=7.1.2", "sphinx-rtd-theme>=2.0.0"]

[tool.uv]
index-url = "https://pypi.org/simple"

[tool.hatch.version]
source = "vcs"

[tool.hatch.envs.default]
installer = "uv"

[tool.hatch.build.targets.wheel]
packages = ["airbase"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--showlocals"
required_plugins = ["pytest-asyncio"]
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "module"
testpaths = ["tests"]
filterwarnings = [
    # DeprecationWarning are errors
    "error::DeprecationWarning:(airbase|tests).*:",
]

[tool.coverage.run]
source = ["airbase"]

[tool.coverage.report]
exclude_also = ["if TYPE_CHECKING:"]
skip_covered = true
skip_empty = true
show_missing = true

[tool.ruff]
line-length = 80
extend-exclude = ["docs", "build"]

[tool.ruff.lint]
select = ["E", "W", "F", "I", "UP"]
ignore = [
    "E501", # https://docs.astral.sh/ruff/rules/line-too-long/
]

[tool.ruff.lint.per-file-ignores]
"cli.py" = [ # typer needs typing.Optional
    "UP007", # https://docs.astral.sh/ruff/rules/non-pep604-annotation-union/
    "UP045", # https://docs.astral.sh/ruff/rules/non-pep604-annotation-optional/
]

[tool.mypy]
python_version = "3.10"
warn_unused_configs = true
warn_unused_ignores = false
warn_no_return = true
warn_return_any = true
warn_unreachable = true
show_error_codes = true
pretty = true
sqlite_cache = true
exclude = "docs|build"

[[tool.mypy.overrides]]
module = ["tqdm.*", "async_property"]
ignore_missing_imports = true

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py310, py311, py312, py313, integration, report, lint, docs
skip_missing_interpreters = True
isolated_build = True
requires =
    tox>=4.25
    tox-uv>=1.25
labels =
    coverage = py310, py311, py312, py313, integration, report

[testenv]
description = non-interation tests
package = wheel
wheel_build_env = {package_env}
setenv =
    COVERAGE_FILE = .coverage.{envname}
commands =
    pytest -ra -q --cov --no-cov-on-fail -k "not integration"
dependency_groups =
    test

[testenv:integration]
description = interation tests
commands =
    pytest -ra -q --cov --no-cov-on-fail -k integration

[testenv:report]
description = combined coverage report
skip_install = true
parallel_show_output = True
setenv =
    COVERAGE_FILE = .coverage
commands =
    coverage combine --keep
    coverage report
deps =
    coverage
depends =
    py310, py311, py312, py313, integration

[testenv:lint]
description = run linters
skip_install = True
parallel_show_output = True
commands =
    pre-commit run --all-files --show-diff-on-failure
deps =
    pre-commit
    pre-commit-uv

[testenv:docs]
description = build docs
skip_install = True
commands =
    sphinx-build -T -b html -d docs/_build/doctrees -D language=en docs/source docs/build
dependency_groups =
    docs
"""
